{"version":3,"sources":["utils/CardDeck.js","components/CommunityCards.js","components/DeckOfCards.js","components/PlayerHands.js","utils/DetermineWinner.js","App.js","index.js"],"names":["rankings","suits","i","deckOfCards","rank","suit","push","position","CommunityCards","communityCards","handleCommunityCardClick","focusedCard","className","map","card","focusedCardClass","idx","isEmpty","color","includes","onClick","style","DeckOfCards","handleDeckClick","usedCards","alignItems","justifyContent","flexBasis","height","isDisabled","has","PlayerHands","playerHands","handlePlayerCardClick","hand","card1","card2","hasFocus","redArr","card1Color","card2Color","isFlush","handOf7","suitMap","Map","set","get","top5","splice","determineHandType","sort","a","b","indexOf","royalCards","setOfCards","Set","isRoyalFlush","length","handRank","handType","forEach","values","cardList","card1RankIdx","add","clear","size","findIndex","isStraightFlush","highRank","rankMap","isFourOfAKind","two","three","rankCount","isFullHouse","threeRank","twoRank","uniqueRank","uniqueOf7","isStraight","isThreeOfAKind","isTwoPair","firstPairRank","secondPairRank","isPair","pairRank","slice","DetermineWinner","board","playersHandTypeArr","c1","c2","finalHand","playerIndex","aCardRank","bCardRank","rankOfHand","indexOfHand","tiedPlayers","player","whoWon","join","playerHandsResult","App","useState","Array","fill","setCommunityCards","setUsedCards","setFocusedCard","numPlayers","setNumPlayers","setPlayerHands","winnerInfo","setWinnerInfo","anchorEl","setAnchorEl","open","setOpen","useEffect","trueIdx","playerIdx","updateFocusedCard","margin","value","onChange","e","n","nInt","parseInt","newPlayerHands","newUsedCards","JSON","parse","stringify","pos","delete","updateNumberOfPlayers","target","marginRight","handleReset","marginLeft","ClickAwayListener","onClickAway","event","cc_count","playerCount","currentTarget","handleCalculateClick","Popper","placement","transition","TransitionProps","Fade","timeout","Paper","Typography","sx","p","deckIndex","newCC","cardIndex","cardPosition","cardIdx","cardToAddBack","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67e62eb2.chunk.js","sourcesContent":["export const rankings = [\n  \"A\",\n  \"K\",\n  \"Q\",\n  \"J\",\n  \"10\",\n  \"9\",\n  \"8\",\n  \"7\",\n  \"6\",\n  \"5\",\n  \"4\",\n  \"3\",\n  \"2\",\n];\n\nexport const suits = [\"♣︎\", \"♠︎\", \"♥︎\", \"♦︎\"];\n\nlet i = 0;\nlet deckOfCards = [];\nfor (let rank of rankings) {\n  for (let suit of suits) {\n    deckOfCards.push({ rank: rank, suit: suit, position: i++ });\n  }\n}\n\nexport default deckOfCards;\n","import React from \"react\";\n\nconst CommunityCards = ({\n  communityCards,\n  handleCommunityCardClick,\n  focusedCard,\n}) => {\n  return (\n    <div>\n      <h3> Community Cards </h3>\n      <div className=\"communityBoard\">\n        {communityCards.map((card, i) => {\n          const focusedCardClass = focusedCard.idx === i ? \" focusedCard\" : \"\";\n          const isEmpty = communityCards[i] === null;\n          const rank = isEmpty ? \"\" : card.rank;\n          const suit = isEmpty ? \"\" : card.suit;\n          const color = [\"♥︎\", \"♦︎\"].includes(suit) ? \"red\" : \"black\";\n          return (\n            <div\n              onClick={() => handleCommunityCardClick(i)}\n              className={\"communityCard\" + focusedCardClass}\n              key={\"CC\" + i}\n            >\n              <div>{rank}</div>\n              <div style={{ color: color }}>{suit}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default CommunityCards;\n","import React from \"react\";\n\nconst DeckOfCards = ({ deckOfCards, handleDeckClick, usedCards }) => {\n  return (\n    <div className=\"deckOfCards\">\n      <h3 style={{ alignItems: \"flex-end\", justifyContent: \"center\" }}>\n        Deck of Cards\n      </h3>\n      <div style={{ flexBasis: 100 + \"%\", height: 0 }}></div>\n      {deckOfCards.map((card, i) => {\n        const rank = card.rank;\n        const suit = card.suit;\n        const color = [\"♥︎\", \"♦︎\"].includes(suit) ? \"red\" : \"black\";\n        const isDisabled = usedCards.has(i);\n        return (\n          <div\n            onClick={() => handleDeckClick(i)}\n            key={i}\n            className={\"cardDeck\" + (isDisabled ? \" disabledCard\" : \"\")}\n          >\n            <div> {rank} </div>\n            <div style={{ color: color }}>{suit}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DeckOfCards;\n","import React from \"react\";\n\nconst PlayerHands = ({ playerHands, focusedCard, handlePlayerCardClick }) => {\n  return (\n    <div className=\"playerHandsContainer\">\n      {playerHands.map((hand, i) => {\n        const card1 = hand.card1;\n        const card2 = hand.card2;\n        const hasFocus = focusedCard.idx !== null && focusedCard.idx - 5 === i;\n        const redArr = [\"♥︎\", \"♦︎\"];\n        const card1Color =\n          card1 !== null && redArr.includes(card1.suit) ? \"red\" : \"black\";\n        const card2Color =\n          card2 !== null && redArr.includes(card2.suit) ? \"red\" : \"black\";\n        return (\n          <div key={\"Player Hand \" + i} className=\"playerHandContainer\">\n            <h4> {\"Player \" + (i + 1)} </h4>\n            <div className=\"playerHand\">\n              <div\n                onClick={() => handlePlayerCardClick(i, 0)}\n                className={\n                  \"playerCard\" +\n                  (hasFocus && focusedCard.card === 0 ? \" focusedCard\" : \"\")\n                }\n              >\n                <div> {card1 !== null ? card1.rank : \"\"} </div>\n                <div style={{ color: card1Color }}>\n                  {card1 !== null ? card1.suit : \"\"}\n                </div>\n              </div>\n\n              <div\n                onClick={() => handlePlayerCardClick(i, 1)}\n                className={\n                  \"playerCard\" +\n                  (hasFocus && focusedCard.card === 1 ? \" focusedCard\" : \"\")\n                }\n              >\n                <div> {card2 !== null ? card2.rank : \"\"} </div>\n\n                <div style={{ color: card2Color }}>\n                  {card2 !== null ? card2.suit : \"\"}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default PlayerHands;\n","import { rankings, suits } from \"./CardDeck\";\n\n/*\n  Hand rankings, reference https://www.cardplayer.com/rules-of-poker/hand-rankings\n  for more details\n\n  Royal Flush       1\n  Straight Flush    2\n  4 Of A Kind       3\n  Full House        4\n  Flush             5\n  Straight          6\n  3 Of A Kind       7\n  2 Pair            8\n  Pair              9\n  High Card         10\n*/\n\n/**\n  Modular functions determine each of the hand types.\n\n  If the function determines it is of that hand type, \n  it will return the top 5 cards as a list.\n\n  Otherwise, it will return an empty list.\n\n  handOf7 is sorted by rank, A, K, Q ...\n  most if not all of the functions depend on this\n*/\n\n/**\n  Determines if the hand is a Royal Flush.\n\n  A Royal Flush consists of Ace, King, Queen, Jack, and 10 all of\n  the same suit.\n*/\nconst isRoyalFlush = (handOf7) => {\n  let royalCards = [];\n  let setOfCards = new Set([\"A\", \"K\", \"Q\", \"J\", \"10\"]);\n  for (const card of handOf7) {\n    if (setOfCards.has(card.rank)) {\n      royalCards.push(card);\n    }\n  }\n  return isFlush(royalCards);\n};\n\n/**\n  Determines if the hand if a Flush.\n\n  A Flush consists of 5 cards with the same suit.\n*/\nconst isFlush = (handOf7) => {\n  let suitMap = new Map();\n  for (const card of handOf7) {\n    const suit = card.suit;\n    suitMap.set(suit, (suitMap.get(suit) ?? 0) + 1);\n    if (suitMap.get(suit) === 5) {\n      let top5 = [];\n      for (const card2 of handOf7) {\n        if (card2.suit === suit) top5.push(card2);\n      }\n      // make sure size is 5\n      top5.splice(5);\n      return top5;\n    }\n  }\n  return [];\n};\n\n/**\n  Determine if the hand is a straight flush.\n\n  5 cards that are in sequence and have the same suit.\n*/\nconst isStraightFlush = (handOf7) => {\n  const suitMap = new Map();\n  suits.forEach((suit) => {\n    suitMap.set(suit, []);\n  });\n  // aggregate cards by suit\n  for (const card of handOf7) {\n    suitMap.get(card.suit).push(card);\n  }\n  // go through suit arrays, determine if the cards in a given array forms a straight of 5 cards\n  for (const cardList of suitMap.values()) {\n    if (cardList.length >= 5) {\n      let top5 = new Set();\n      for (let i = 1; i < cardList.length; ++i) {\n        const card1RankIdx = rankings.indexOf(cardList[i - 1].rank);\n        const card2RankIdx = rankings.indexOf(cardList[i].rank);\n        // adjacent cards are sequential\n        if (card2RankIdx - card1RankIdx === 1) {\n          top5.add(cardList[i - 1]);\n          top5.add(cardList[i]);\n          // not sequential\n        } else top5.clear();\n      }\n\n      if (top5.size === 5) return [...top5];\n      // need to determine if Ace low straight, Ace low straight can only be\n      // 5 -> 4 -> 3 -> 2 -> A\n      top5.clear();\n      for (const rank of [\"5\", \"4\", \"3\", \"2\", \"A\"]) {\n        const idx = cardList.findIndex((card) => {\n          return card.rank === rank;\n        });\n        if (idx !== -1) top5.add(cardList[idx]);\n      }\n      if (top5.size === 5) {\n        return [...top5];\n      }\n    }\n  }\n  return [];\n};\n\n/**\n  Determines if there are five cards in a sequence based on card rank.\n*/\nconst isStraight = (handOf7) => {\n  let uniqueRank = new Set();\n  let uniqueOf7 = [];\n  // remove duplicates of ranks\n  handOf7.forEach((card) => {\n    if (!uniqueRank.has(card.rank)) {\n      uniqueOf7.push(card);\n      uniqueRank.add(card.rank);\n    }\n  });\n  let top5 = new Set();\n  //uniqueOf7 sorted by rank, see if the difference between adj cards is equal to 1\n  for (let i = 1; i < uniqueOf7.length; ++i) {\n    const card1RankIdx = rankings.indexOf(uniqueOf7[i - 1].rank);\n    const card2RankIdx = rankings.indexOf(uniqueOf7[i].rank);\n    // cards are sequential\n    if (card2RankIdx - card1RankIdx === 1) {\n      top5.add(uniqueOf7[i - 1]);\n      top5.add(uniqueOf7[i]);\n      // cards are not sequential\n    } else top5.clear();\n    if (top5.size === 5) return [...top5];\n  }\n  // need to determine if Ace low straight, Ace low straight can only be\n  // 5 -> 4 -> 3 -> 2 -> A\n  top5.clear();\n  for (const rank of [\"5\", \"4\", \"3\", \"2\", \"A\"]) {\n    const idx = uniqueOf7.findIndex((card) => {\n      return card.rank === rank;\n    });\n    if (idx !== -1) top5.add(uniqueOf7[idx]);\n  }\n  return top5.size === 5 ? [...top5] : [];\n};\n\n/**\n * Determines if there are four cards of the same rank\n */\nconst isFourOfAKind = (handOf7) => {\n  let rankMap = new Map();\n  for (const card of handOf7) {\n    const rank = card.rank;\n    if (!rankMap.has(rank)) rankMap.set(rank, []);\n    rankMap.get(rank).push(card);\n    // found a quad (four cards of same rank), proceed to return\n    if (rankMap.get(rank).length === 4) {\n      let top5 = [...rankMap.get(rank)];\n      // find the highest ranked card not in the quad array, add to top5\n      for (const card of handOf7) {\n        if (card.rank !== rank) {\n          top5.push(card);\n          return top5;\n        }\n      }\n    }\n  }\n  return [];\n};\n\n/**\n  Determines if the hand contains three of a kind and a pair\n*/\nconst isFullHouse = (handOf7) => {\n  let two = [];\n  let three = [];\n\n  const rankCount = new Map();\n  // aggregate cards based on rank\n  for (const card of handOf7) {\n    if (!rankCount.has(card.rank)) {\n      rankCount.set(card.rank, []);\n    }\n    rankCount.get(card.rank).push(card);\n  }\n  // find cards of three and cards of two\n  for (const cardList of rankCount.values()) {\n    if (cardList.length >= 3 && three.length === 0) three = cardList;\n    else if (cardList.length >= 2 && two.length === 0) two = cardList;\n  }\n  // make sure the return array is of size 5\n  three.splice(3);\n  two.splice(2);\n  return three.length && two.length ? [...three, ...two] : [];\n};\n\n/**\n  Determines if the hand contains three cards of the same rank\n*/\nconst isThreeOfAKind = (handOf7) => {\n  let rankMap = new Map();\n  for (const card of handOf7) {\n    if (!rankMap.has(card.rank)) rankMap.set(card.rank, []);\n    rankMap.get(card.rank).push(card);\n    // found a three of a kind, proceed to return\n    if (rankMap.get(card.rank).length === 3) {\n      let top5 = [...rankMap.get(card.rank)];\n      // find the two highest ranked cards not in the triplet, add to top5\n      for (const card2 of handOf7) {\n        if (card2.rank !== card.rank) {\n          top5.push(card2);\n        }\n        if (top5.length === 5) return top5;\n      }\n    }\n  }\n  return [];\n};\n\n/**\n  Determines if the hand contains two different pairs\n*/\nconst isTwoPair = (handOf7) => {\n  let rankMap = new Map();\n  let top5 = [];\n  for (const card of handOf7) {\n    if (!rankMap.has(card.rank)) rankMap.set(card.rank, []);\n    rankMap.get(card.rank).push(card);\n    // found a pair of the hand of 7\n    if (rankMap.get(card.rank).length === 2) {\n      // add to top 5\n      top5.push(...rankMap.get(card.rank));\n      // if we found two pairs, return them\n      if (top5.length === 4) {\n        for (const card of handOf7) {\n          // add the highest ranked card not in the pairs to top 5\n          if (top5.indexOf(card) === -1) {\n            top5.push(card);\n            return top5;\n          }\n        }\n      }\n    }\n  }\n  return [];\n};\n\n/**\n  Determines if the hand contains a pair\n*/\nconst isPair = (handOf7) => {\n  let rankMap = new Map();\n  for (const card of handOf7) {\n    if (!rankMap.has(card.rank)) rankMap.set(card.rank, []);\n    rankMap.get(card.rank).push(card);\n    // found the first pair of the hand of 7, return it immediately\n    if (rankMap.get(card.rank).length === 2) {\n      let top5 = [...rankMap.get(card.rank)];\n      // add the three highest ranked cards not in the pair to top5\n      for (const card2 of handOf7) {\n        if (card2.rank !== card.rank) top5.push(card2);\n        if (top5.length === 5) return top5;\n      }\n    }\n  }\n  return [];\n};\n\nconst determineHandType = (handOf7) => {\n  // given 7 cards, determines the highest ranking hand type\n  // sort by ranking A K Q ... 3 2\n  handOf7.sort((a, b) => {\n    return rankings.indexOf(a.rank) - rankings.indexOf(b.rank);\n  });\n  let top5 = isRoyalFlush(handOf7);\n  if (top5.length) {\n    return { handRank: 1, handType: \"Royal Flush\", top5: top5 };\n  }\n  top5 = isStraightFlush(handOf7);\n  if (top5.length) {\n    const highRank = top5[0].rank;\n    const handType = `Straight Flush, ${highRank} High`;\n    return { handRank: 2, handType: handType, top5: top5 };\n  }\n  top5 = isFourOfAKind(handOf7);\n  if (top5.length) {\n    const highRank = top5[0].rank;\n    const handType = `Four Of A Kind, ${highRank}'s`;\n    return { handRank: 3, handType: handType, top5: top5 };\n  }\n  top5 = isFullHouse(handOf7);\n  if (top5.length) {\n    const threeRank = top5[0].rank;\n    const twoRank = top5[top5.length - 1].rank;\n    const handType = `Full House, ${threeRank}'s Full Of ${twoRank}'s `;\n    return { handRank: 4, handType: handType, top5: top5 };\n  }\n  top5 = isFlush(handOf7);\n  if (top5.length) {\n    const handRank = top5[0].rank;\n    const handType = `Flush, ${handRank} High`;\n    return { handRank: 5, handType: handType, top5: top5 };\n  }\n  top5 = isStraight(handOf7);\n  if (top5.length) {\n    const handRank = top5[0].rank;\n    const handType = `Straight, ${handRank} High`;\n    return { handRank: 6, handType: handType, top5: top5 };\n  }\n  top5 = isThreeOfAKind(handOf7);\n  if (top5.length) {\n    const handRank = top5[0].rank;\n    const handType = `Three Of A Kind, ${handRank}'s`;\n    return { handRank: 7, handType: handType, top5: top5 };\n  }\n  top5 = isTwoPair(handOf7);\n  if (top5.length) {\n    const firstPairRank = top5[0].rank;\n    const secondPairRank = top5[2].rank;\n    const handType = `Two Pair, ${firstPairRank}'s And ${secondPairRank}'s`;\n    return { handRank: 8, handType: handType, top5: top5 };\n  }\n  top5 = isPair(handOf7);\n  if (top5.length) {\n    const pairRank = top5[0].rank;\n    const handType = `Pair, ${pairRank}'s`;\n    return { handRank: 9, handType: handType, top5: top5 };\n  }\n  // high card\n  const handType = `High Card, ${handOf7[0].rank} High`;\n  return { handRank: 10, handType: handType, top5: handOf7.slice(0, 5) };\n};\n\nconst DetermineWinner = (communityCards, playerHands) => {\n  // grab the needed state values\n  const board = communityCards;\n  const playersHandTypeArr = [];\n  // iterate through each players hands\n  for (let i = 0; i < playerHands.length; ++i) {\n    // grab the 5 cards on the board and the players 2 card hand\n    let handOf7 = [];\n    const c1 = playerHands[i].card1;\n    const c2 = playerHands[i].card2;\n    handOf7.push(c1, c2, ...board);\n    // call function to determine the players Hand\n    // final hand: { 'handType': string, handType: string, 'topCards': arr}\n    const finalHand = determineHandType(handOf7);\n    // add this information to an array for processing\n    playersHandTypeArr.push({ finalHand: finalHand, playerIndex: i });\n  }\n  // sort the array based on hand rank, break ties by comparing the\n  // top cards from each persons hand\n  // key = hand type, val = player index\n  let rankMap = new Map();\n  playersHandTypeArr.sort((a, b) => {\n    if (a.finalHand.handRank !== b.finalHand.handRank)\n      return a.finalHand.handRank - b.finalHand.handRank;\n    else {\n      for (\n        let i = 0;\n        i < a.finalHand.top5.length && i < b.finalHand.top5.length;\n        ++i\n      ) {\n        const aCardRank = a.finalHand.top5[i].rank;\n        const bCardRank = b.finalHand.top5[i].rank;\n        if (aCardRank !== bCardRank) {\n          return rankings.indexOf(aCardRank) - rankings.indexOf(bCardRank);\n        }\n      }\n      // if we reach here, the top card rankings are the same i.e. the two\n      // hands tied\n      if (!rankMap.has(a.finalHand.handRank)) {\n        rankMap.set(a.finalHand.handRank, new Set());\n      }\n      rankMap.get(a.finalHand.handRank).add(a.playerIndex);\n      rankMap.get(b.finalHand.handRank).add(b.playerIndex);\n\n      return 0;\n    }\n  });\n\n  const rankOfHand = playersHandTypeArr[0].finalHand.handRank;\n  const handType = playersHandTypeArr[0].finalHand.handType;\n  const indexOfHand = playersHandTypeArr[0].playerIndex;\n  const top5 = playersHandTypeArr[0].finalHand.top5;\n\n  // index 0 of the array (playersHandTypeArr) is either the complete winner\n  // or it is tied for first with other players\n  if (!rankMap.has(rankOfHand) || !rankMap.get(rankOfHand).has(indexOfHand)) {\n    // this player is the singular winner of the poker hand\n    return {\n      whoWon: `Player ${indexOfHand + 1} wins!`,\n      top5: top5,\n      handType: handType,\n      playerHandsResult: playersHandTypeArr,\n    };\n  } else {\n    let tiedPlayers = [...rankMap.get(rankOfHand)].sort().map((player) => {\n      return player + 1;\n    });\n    const whoWon = `Players ${tiedPlayers.slice(0, -1).join(\", \")} and ${\n      tiedPlayers[tiedPlayers.length - 1]\n    } have tied!`;\n    return {\n      whoWon: whoWon,\n      top5: top5,\n      handType: handType,\n      playerHandsResult: playersHandTypeArr,\n    };\n  }\n};\n\nexport default DetermineWinner;\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport Popper from \"@mui/material/Popper\";\nimport Fade from \"@mui/material/Fade\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport deckOfCards from \"./utils/CardDeck.js\";\nimport CommunityCards from \"./components/CommunityCards.js\";\nimport DeckOfCards from \"./components/DeckOfCards.js\";\nimport PlayerHands from \"./components/PlayerHands.js\";\nimport DetermineWinner from \"./utils/DetermineWinner.js\";\n\nfunction App() {\n  const [communityCards, setCommunityCards] = useState(Array(5).fill(null));\n  const [usedCards, setUsedCards] = useState(new Set());\n  const [focusedCard, setFocusedCard] = useState({ idx: 0, card: null });\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerHands, setPlayerHands] = useState([\n    { card1: null, card2: null },\n    { card1: null, card2: null },\n  ]);\n  const [winnerInfo, setWinnerInfo] = useState(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [open, setOpen] = useState(false);\n\n  const updateFocusedCard = () => {\n    for (let i = focusedCard.idx; i < focusedCard.idx + 5 + numPlayers; ++i) {\n      const trueIdx = i % (5 + numPlayers);\n      if (trueIdx <= 4) {\n        // community card\n        if (communityCards[trueIdx] === null) {\n          setFocusedCard({ idx: trueIdx, card: null });\n          return;\n        }\n      } else {\n        const playerIdx = trueIdx - 5;\n        // player card\n        if (playerHands[playerIdx].card1 === null) {\n          setFocusedCard({ idx: playerIdx + 5, card: 0 });\n          return;\n        } else if (playerHands[playerIdx].card2 === null) {\n          setFocusedCard({ idx: playerIdx + 5, card: 1 });\n          return;\n        }\n      }\n    }\n    // all positions are filled\n    setFocusedCard({ idx: null, card: null });\n  };\n\n  useEffect(() => {\n    // only update the focused card if the usedCards is changed or numplayers is changed\n    updateFocusedCard();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [usedCards, numPlayers]);\n\n  const handleReset = () => {\n    setCommunityCards(Array(5).fill(null));\n    setUsedCards(new Set());\n    setFocusedCard({ idx: 0, card: null });\n    setWinnerInfo(null);\n    setOpen(false);\n    let newPlayerHands = [];\n    for (let i = 0; i < numPlayers; ++i)\n      newPlayerHands.push({ card1: null, card2: null });\n    setPlayerHands(newPlayerHands);\n  };\n\n  const handleCalculateClick = (event) => {\n    // check if community cards is complete (has 5 cards)\n    let cc_count = 0;\n    communityCards.forEach((card) => {\n      if (card !== null) ++cc_count;\n    });\n    // check that all player hands are complete (each hand has two cards)\n    let playerCount = 0;\n    playerHands.forEach((hand) => {\n      if (hand !== null && hand.card1 !== null && hand.card2 !== null)\n        ++playerCount;\n    });\n    if (cc_count !== 5 || playerCount !== playerHands.length) {\n      // display popper letting user know to fill out all cards\n      setAnchorEl(event.currentTarget);\n      setOpen(true);\n      return;\n    }\n\n    const winnerInfo = DetermineWinner(communityCards, playerHands);\n    setWinnerInfo(winnerInfo);\n  };\n\n  const updateNumberOfPlayers = (n) => {\n    const nInt = parseInt(n);\n    let newPlayerHands = [];\n    for (let i = 0; i < nInt; ++i) {\n      newPlayerHands.push({ card1: null, card2: null });\n    }\n    let newUsedCards = new Set(usedCards);\n    for (let i = 0; i < playerHands.length; ++i) {\n      // keep these hands\n      if (i < nInt) {\n        const hand = JSON.parse(JSON.stringify(playerHands[i]));\n        newPlayerHands[i] = hand;\n      } else {\n        // add the cards back to the deck\n        if (playerHands[i].card1 !== null) {\n          const pos = playerHands[i].card1.position;\n          newUsedCards.delete(pos);\n        }\n        if (playerHands[i].card2 !== null) {\n          const pos = playerHands[i].card2.position;\n          newUsedCards.delete(pos);\n        }\n      }\n    }\n    setNumPlayers(nInt);\n    setUsedCards(newUsedCards);\n    setPlayerHands(newPlayerHands);\n  };\n\n  const handleDeckClick = (deckIndex) => {\n    if (!usedCards.has(deckIndex) && focusedCard.idx !== null) {\n      // update used cards set\n      let newUsedCards = new Set(usedCards);\n      newUsedCards.add(deckIndex);\n      setUsedCards(newUsedCards);\n\n      // update community card\n      if (focusedCard.idx <= 4) {\n        let newCC = [...communityCards];\n        newCC[focusedCard.idx] = deckOfCards[deckIndex];\n        setCommunityCards(newCC);\n      }\n      // update player card\n      else {\n        let newPlayerHands = playerHands.map((hand) => ({ ...hand }));\n        const playerIdx = focusedCard.idx - 5;\n        if (focusedCard.card === 0) {\n          newPlayerHands[playerIdx].card1 = deckOfCards[deckIndex];\n        } else if (focusedCard.card === 1) {\n          newPlayerHands[playerIdx].card2 = deckOfCards[deckIndex];\n        }\n        setPlayerHands(newPlayerHands);\n      }\n    }\n  };\n  const handleCommunityCardClick = (cardIndex) => {\n    // check if there is a card already present in position, remove if true\n    if (communityCards[cardIndex] !== null) {\n      // update community cards\n      let newCC = [...communityCards];\n      const cardPosition = newCC[cardIndex].position;\n      newCC[cardIndex] = null;\n      setCommunityCards(newCC);\n\n      // update used cards\n      let newUsedCards = new Set(usedCards);\n      newUsedCards.delete(cardPosition);\n      setUsedCards(newUsedCards);\n    }\n    setFocusedCard({ idx: cardIndex, card: null });\n  };\n\n  const handlePlayerCardClick = (playerIdx, cardIdx) => {\n    // check if there is a card already present in position, remove if true\n    if (\n      (playerHands[playerIdx].card1 !== null && cardIdx === 0) ||\n      (playerHands[playerIdx].card2 !== null && cardIdx === 1)\n    ) {\n      let newPlayerHands = playerHands.map((hand) => ({ ...hand }));\n      let cardToAddBack = null;\n      if (cardIdx === 0) {\n        cardToAddBack = newPlayerHands[playerIdx].card1.position;\n        newPlayerHands[playerIdx].card1 = null;\n      } else if (cardIdx === 1) {\n        cardToAddBack = newPlayerHands[playerIdx].card2.position;\n        newPlayerHands[playerIdx].card2 = null;\n      }\n      // remove the card deckIndex as being used\n      let newUsedCards = new Set(usedCards);\n      newUsedCards.delete(cardToAddBack);\n      setUsedCards(newUsedCards);\n      setPlayerHands(newPlayerHands);\n    }\n    setFocusedCard({ idx: playerIdx + 5, card: cardIdx });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1> TEXAS HOLDEM HAND ANALYZER</h1>\n      <h3>Determines the winner based off of a complete poker hand</h3>\n      <div style={{ margin: 1 + \"rem\" }}>\n        <select\n          value={numPlayers}\n          onChange={(e) => updateNumberOfPlayers(e.target.value)}\n          style={{ marginRight: 1 + \"rem\" }}\n        >\n          {[2, 3, 4, 5, 6, 7, 8].map((n) => {\n            return (\n              <option key={\"Player \" + n} value={n}>\n                {n + \" players\"}\n              </option>\n            );\n          })}\n        </select>\n        <button onClick={() => handleReset()} style={{ marginLeft: 1 + \"rem\" }}>\n          Reset\n        </button>\n        {/* pop over shown if not all cards are filled */}\n        <ClickAwayListener onClickAway={() => setOpen(false)}>\n          <span>\n            <button\n              onClick={(e) => handleCalculateClick(e)}\n              style={{ marginLeft: 1 + \"rem\" }}\n            >\n              Calculate\n            </button>\n            <Popper\n              open={open}\n              anchorEl={anchorEl}\n              placement={\"bottom\"}\n              transition\n            >\n              {({ TransitionProps }) => (\n                <Fade {...TransitionProps} timeout={200}>\n                  <Paper>\n                    <Typography sx={{ p: 2 }}>\n                      Make sure all card slots are filled.\n                    </Typography>\n                  </Paper>\n                </Fade>\n              )}\n            </Popper>\n          </span>\n        </ClickAwayListener>\n      </div>\n\n      <div className=\"allCardsContainer\">\n        <DeckOfCards\n          deckOfCards={deckOfCards}\n          handleDeckClick={handleDeckClick}\n          usedCards={usedCards}\n        />\n        <div className=\"ccAndPlayer\">\n          <CommunityCards\n            communityCards={communityCards}\n            handleCommunityCardClick={handleCommunityCardClick}\n            focusedCard={focusedCard}\n          />\n          <PlayerHands\n            playerHands={playerHands}\n            focusedCard={focusedCard}\n            handlePlayerCardClick={handlePlayerCardClick}\n          ></PlayerHands>\n\n          {/* winner information */}\n          {winnerInfo !== null ? (\n            <div>\n              <h3>{winnerInfo.whoWon}</h3>\n              <h3>{winnerInfo.handType}</h3>\n              <h3>Winning Hand:</h3>\n              <div className=\"winningHand\">\n                {winnerInfo.top5.map((card, i) => {\n                  const rank = card.rank;\n                  const suit = card.suit;\n                  const color = [\"♥︎\", \"♦︎\"].includes(suit) ? \"red\" : \"black\";\n                  return (\n                    <div className={\"miniCard\"} key={\"winningCard\" + i}>\n                      <div>{rank}</div>\n                      <div style={{ color: color }}>{suit}</div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}