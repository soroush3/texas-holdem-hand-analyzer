{"version":3,"sources":["utils/CardDeck.js","components/CommunityCards.js","components/DeckOfCards.js","components/PlayerHands.js","utils/DetermineWinner.js","TexasHoldem.js","assets/Hand-Rankings-Upswing-Poker.jpg","App.js","index.js"],"names":["rankings","suits","i","deckOfCards","rank","suit","push","position","CommunityCards","communityCards","handleCommunityCardClick","focusedCard","className","map","card","focusedCardClass","idx","isEmpty","color","includes","onClick","style","DeckOfCards","handleDeckClick","usedCards","flexBasis","isDisabled","has","PlayerHands","playerHands","handlePlayerCardClick","playerHand","card1","card2","info","hasFocus","redArr","card1Color","card2Color","id","effect","type","handType","top5","cursor","isFlush","handOf7","suitMap","Map","set","get","splice","determineHandType","sort","a","b","indexOf","royalCards","setOfCards","Set","isRoyalFlush","length","handRank","forEach","values","cardList","card1RankIdx","add","clear","size","findIndex","isStraightFlush","highRank","rankMap","isFourOfAKind","two","three","rankCount","isFullHouse","threeRank","twoRank","uniqueRank","uniqueOf7","isStraight","isThreeOfAKind","isTwoPair","firstPairRank","secondPairRank","isPair","pairRank","slice","getPlayerHandType","TexasHoldem","useState","Array","fill","setCommunityCards","setUsedCards","setFocusedCard","numPlayers","setNumPlayers","setPlayerHands","winnerInfo","setWinnerInfo","anchorEl","setAnchorEl","showCardErrorPopper","setShowCardErrorPopper","prevUsedCardsLen","useRef","prevNumberOfPlayers","useEffect","current","communityIdx","playerIdx","updateFocusedCard","handleCalculateClick","event","cc_count","reduce","count","playerCount","hand","currentTarget","playersHandTypeArr","finalHand","playerIndex","aCardRank","bCardRank","rankOfHand","indexOfHand","tiedPlayers","player","whoWon","join","playerHandsResult","DetermineWinner","newPlayerHands","playerHandInfo","margin","value","onChange","e","n","nInt","parseInt","newUsedCards","pos","delete","updateNumberOfPlayers","target","marginRight","handleReset","marginLeft","ClickAwayListener","onClickAway","Popper","open","placement","transition","TransitionProps","Fade","timeout","Paper","Typography","sx","p","deckIndex","newCC","cardIndex","cardPosition","cardIdx","cardToAddBack","App","alt","medium","HandRankings","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7926325.chunk.js","sourcesContent":["export const rankings = [\n  \"A\",\n  \"K\",\n  \"Q\",\n  \"J\",\n  \"10\",\n  \"9\",\n  \"8\",\n  \"7\",\n  \"6\",\n  \"5\",\n  \"4\",\n  \"3\",\n  \"2\",\n];\n\nexport const suits = [\"♣︎\", \"♠︎\", \"♥︎\", \"♦︎\"];\n\nlet i = 0;\nlet deckOfCards = [];\nfor (let rank of rankings) {\n  for (let suit of suits) {\n    deckOfCards.push({ rank: rank, suit: suit, position: i++ });\n  }\n}\n\nexport default deckOfCards;\n","import React from \"react\";\n\nconst CommunityCards = ({\n  communityCards,\n  handleCommunityCardClick,\n  focusedCard,\n}) => {\n  return (\n    <div>\n      <h3> Community Cards </h3>\n      <div className=\"communityBoard\">\n        {communityCards.map((card, i) => {\n          const focusedCardClass = focusedCard.idx === i ? \" focusedCard\" : \"\";\n          const isEmpty = communityCards[i] === null;\n          const rank = isEmpty ? \"\" : card.rank;\n          const suit = isEmpty ? \"\" : card.suit;\n          const color = [\"♥︎\", \"♦︎\"].includes(suit) ? \"red\" : \"black\";\n          return (\n            <div\n              onClick={() => handleCommunityCardClick(i)}\n              className={\"communityCard\" + focusedCardClass}\n              key={\"CC\" + i}\n            >\n              <div>{rank}</div>\n              <div style={{ color: color }}>{suit}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default CommunityCards;\n","import React from \"react\";\n\nconst DeckOfCards = ({ deckOfCards, handleDeckClick, usedCards }) => {\n  return (\n    <div className=\"deckOfCards\">\n      <h3>Deck of Cards</h3>\n      <div style={{ flexBasis: \"100%\" }}></div>\n      {deckOfCards.map((card, i) => {\n        const rank = card.rank;\n        const suit = card.suit;\n        const color = [\"♥︎\", \"♦︎\"].includes(suit) ? \"red\" : \"black\";\n        const isDisabled = usedCards.has(i);\n        return (\n          <div\n            onClick={() => handleDeckClick(i)}\n            key={i}\n            className={\"cardDeck\" + (isDisabled ? \" disabledCard\" : \"\")}\n          >\n            <div> {rank} </div>\n            <div style={{ color: color }}>{suit}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DeckOfCards;\n","import ReactTooltip from \"react-tooltip\";\n\nconst PlayerHands = ({ playerHands, focusedCard, handlePlayerCardClick }) => {\n  return (\n    <div className=\"playerHandsContainer\">\n      {playerHands.map((playerHand, i) => {\n        const card1 = playerHand.card1;\n        const card2 = playerHand.card2;\n        const info = playerHand.info;\n        const hasFocus = focusedCard.idx !== null && focusedCard.idx - 5 === i;\n        const redArr = [\"♥︎\", \"♦︎\"];\n        const card1Color =\n          card1 !== null && redArr.includes(card1.suit) ? \"red\" : \"black\";\n        const card2Color =\n          card2 !== null && redArr.includes(card2.suit) ? \"red\" : \"black\";\n        return (\n          <div key={\"Player Hand \" + i} className=\"playerHandContainer\">\n            {/* tooltip for when player hand info is available, \"Player x\" is clickable */}\n            {info && (\n              <ReactTooltip\n                id={`playerHandInfo_${i}`}\n                effect=\"solid\"\n                type=\"light\"\n                className=\"opaque\"\n              >\n                <h2 style={{ color: \"black\" }}>{info.handType}</h2>\n                <h3 style={{ color: \"black\" }}>Hand:</h3>\n                <div className=\"winningHand\">\n                  {info.top5.map((card, i) => {\n                    const rank = card.rank;\n                    const suit = card.suit;\n                    const color = [\"♥︎\", \"♦︎\"].includes(suit) ? \"red\" : \"black\";\n                    return (\n                      <div className={\"miniCard\"} key={\"winningCard\" + i}>\n                        <div style={{ color: \"black\" }}>{rank}</div>\n                        <div style={{ color: color }}>{suit}</div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </ReactTooltip>\n            )}\n            <h4\n              // links tooltip to this header indicating which Player number\n              data-tip\n              data-for={`playerHandInfo_${i}`}\n              style={{ cursor: info ? \"pointer\" : null }}\n            >\n              {\"Player \" + (i + 1) + (info ? \" ⓘ\" : \"\")}\n            </h4>\n            <div className=\"playerHand\">\n              {/* first card */}\n              <div\n                onClick={() => handlePlayerCardClick(i, 0)}\n                className={\n                  \"playerCard\" +\n                  (hasFocus && focusedCard.card === 0 ? \" focusedCard\" : \"\")\n                }\n              >\n                <div> {card1 !== null ? card1.rank : \"\"} </div>\n                <div style={{ color: card1Color }}>\n                  {card1 !== null ? card1.suit : \"\"}\n                </div>\n              </div>\n              {/* second card */}\n              <div\n                onClick={() => handlePlayerCardClick(i, 1)}\n                className={\n                  \"playerCard\" +\n                  (hasFocus && focusedCard.card === 1 ? \" focusedCard\" : \"\")\n                }\n              >\n                <div> {card2 !== null ? card2.rank : \"\"} </div>\n\n                <div style={{ color: card2Color }}>\n                  {card2 !== null ? card2.suit : \"\"}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default PlayerHands;\n","import { rankings, suits } from \"./CardDeck\";\n\n/*\n  Hand rankings, reference https://www.cardplayer.com/rules-of-poker/hand-rankings\n  for more details\n\n  Royal Flush       1\n  Straight Flush    2\n  4 Of A Kind       3\n  Full House        4\n  Flush             5\n  Straight          6\n  3 Of A Kind       7\n  2 Pair            8\n  Pair              9\n  High Card         10\n*/\n\n/**\n  Modular functions determine each of the hand types.\n\n  If the function determines it is of that hand type, \n  it will return the top 5 cards as a list.\n\n  Otherwise, it will return an empty list.\n\n  handOf7 is sorted by rank, A, K, Q ...\n  most if not all of the functions depend on this\n*/\n\n/**\n  Determines if the hand is a Royal Flush.\n\n  A Royal Flush consists of Ace, King, Queen, Jack, and 10 all of\n  the same suit.\n*/\nconst isRoyalFlush = (handOf7) => {\n  let royalCards = [];\n  let setOfCards = new Set([\"A\", \"K\", \"Q\", \"J\", \"10\"]);\n  for (const card of handOf7) {\n    if (setOfCards.has(card.rank)) {\n      royalCards.push(card);\n    }\n  }\n  return isFlush(royalCards);\n};\n\n/**\n  Determines if the hand if a Flush.\n\n  A Flush consists of 5 cards with the same suit.\n*/\nconst isFlush = (handOf7) => {\n  let suitMap = new Map();\n  for (const card of handOf7) {\n    const suit = card.suit;\n    suitMap.set(suit, (suitMap.get(suit) ?? 0) + 1);\n    if (suitMap.get(suit) === 5) {\n      let top5 = [];\n      for (const card2 of handOf7) {\n        if (card2.suit === suit) top5.push(card2);\n      }\n      // make sure size is 5\n      top5.splice(5);\n      return top5;\n    }\n  }\n  return [];\n};\n\n/**\n  Determine if the hand is a straight flush.\n\n  5 cards that are in sequence and have the same suit.\n*/\nconst isStraightFlush = (handOf7) => {\n  const suitMap = new Map();\n  suits.forEach((suit) => {\n    suitMap.set(suit, []);\n  });\n  // aggregate cards by suit\n  for (const card of handOf7) {\n    suitMap.get(card.suit).push(card);\n  }\n  // go through suit arrays, determine if the cards in a given array forms a straight of 5 cards\n  for (const cardList of suitMap.values()) {\n    if (cardList.length >= 5) {\n      let top5 = new Set();\n      for (let i = 1; i < cardList.length; ++i) {\n        const card1RankIdx = rankings.indexOf(cardList[i - 1].rank);\n        const card2RankIdx = rankings.indexOf(cardList[i].rank);\n        // adjacent cards are sequential\n        if (card2RankIdx - card1RankIdx === 1) {\n          top5.add(cardList[i - 1]);\n          top5.add(cardList[i]);\n          // not sequential\n        } else top5.clear();\n      }\n\n      if (top5.size === 5) return [...top5];\n      // need to determine if Ace low straight, Ace low straight can only be\n      // 5 -> 4 -> 3 -> 2 -> A\n      top5.clear();\n      for (const rank of [\"5\", \"4\", \"3\", \"2\", \"A\"]) {\n        const idx = cardList.findIndex((card) => {\n          return card.rank === rank;\n        });\n        if (idx !== -1) top5.add(cardList[idx]);\n      }\n      if (top5.size === 5) {\n        return [...top5];\n      }\n    }\n  }\n  return [];\n};\n\n/**\n  Determines if there are five cards in a sequence based on card rank.\n*/\nconst isStraight = (handOf7) => {\n  let uniqueRank = new Set();\n  let uniqueOf7 = [];\n  // remove duplicates of ranks\n  handOf7.forEach((card) => {\n    if (!uniqueRank.has(card.rank)) {\n      uniqueOf7.push(card);\n      uniqueRank.add(card.rank);\n    }\n  });\n  let top5 = new Set();\n  //uniqueOf7 sorted by rank, see if the difference between adj cards is equal to 1\n  for (let i = 1; i < uniqueOf7.length; ++i) {\n    const card1RankIdx = rankings.indexOf(uniqueOf7[i - 1].rank);\n    const card2RankIdx = rankings.indexOf(uniqueOf7[i].rank);\n    // cards are sequential\n    if (card2RankIdx - card1RankIdx === 1) {\n      top5.add(uniqueOf7[i - 1]);\n      top5.add(uniqueOf7[i]);\n      // cards are not sequential\n    } else top5.clear();\n    if (top5.size === 5) return [...top5];\n  }\n  // need to determine if Ace low straight, Ace low straight can only be\n  // 5 -> 4 -> 3 -> 2 -> A\n  top5.clear();\n  for (const rank of [\"5\", \"4\", \"3\", \"2\", \"A\"]) {\n    const idx = uniqueOf7.findIndex((card) => {\n      return card.rank === rank;\n    });\n    if (idx !== -1) top5.add(uniqueOf7[idx]);\n  }\n  return top5.size === 5 ? [...top5] : [];\n};\n\n/**\n * Determines if there are four cards of the same rank\n */\nconst isFourOfAKind = (handOf7) => {\n  let rankMap = new Map();\n  for (const card of handOf7) {\n    const rank = card.rank;\n    if (!rankMap.has(rank)) rankMap.set(rank, []);\n    rankMap.get(rank).push(card);\n    // found a quad (four cards of same rank), proceed to return\n    if (rankMap.get(rank).length === 4) {\n      let top5 = [...rankMap.get(rank)];\n      // find the highest ranked card not in the quad array, add to top5\n      for (const card of handOf7) {\n        if (card.rank !== rank) {\n          top5.push(card);\n          return top5;\n        }\n      }\n    }\n  }\n  return [];\n};\n\n/**\n  Determines if the hand contains three of a kind and a pair\n*/\nconst isFullHouse = (handOf7) => {\n  let two = [];\n  let three = [];\n\n  const rankCount = new Map();\n  // aggregate cards based on rank\n  for (const card of handOf7) {\n    if (!rankCount.has(card.rank)) {\n      rankCount.set(card.rank, []);\n    }\n    rankCount.get(card.rank).push(card);\n  }\n  // find cards of three and cards of two\n  for (const cardList of rankCount.values()) {\n    if (cardList.length >= 3 && three.length === 0) three = cardList;\n    else if (cardList.length >= 2 && two.length === 0) two = cardList;\n  }\n  // make sure the return array is of size 5\n  three.splice(3);\n  two.splice(2);\n  return three.length && two.length ? [...three, ...two] : [];\n};\n\n/**\n  Determines if the hand contains three cards of the same rank\n*/\nconst isThreeOfAKind = (handOf7) => {\n  let rankMap = new Map();\n  for (const card of handOf7) {\n    if (!rankMap.has(card.rank)) rankMap.set(card.rank, []);\n    rankMap.get(card.rank).push(card);\n    // found a three of a kind, proceed to return\n    if (rankMap.get(card.rank).length === 3) {\n      let top5 = [...rankMap.get(card.rank)];\n      // find the two highest ranked cards not in the triplet, add to top5\n      for (const card2 of handOf7) {\n        if (card2.rank !== card.rank) {\n          top5.push(card2);\n        }\n        if (top5.length === 5) return top5;\n      }\n    }\n  }\n  return [];\n};\n\n/**\n  Determines if the hand contains two different pairs\n*/\nconst isTwoPair = (handOf7) => {\n  let rankMap = new Map();\n  let top5 = [];\n  for (const card of handOf7) {\n    if (!rankMap.has(card.rank)) rankMap.set(card.rank, []);\n    rankMap.get(card.rank).push(card);\n    // found a pair of the hand of 7\n    if (rankMap.get(card.rank).length === 2) {\n      // add to top 5\n      top5.push(...rankMap.get(card.rank));\n      // if we found two pairs, return them\n      if (top5.length === 4) {\n        for (const card of handOf7) {\n          // add the highest ranked card not in the pairs to top 5\n          if (top5.indexOf(card) === -1) {\n            top5.push(card);\n            return top5;\n          }\n        }\n      }\n    }\n  }\n  return [];\n};\n\n/**\n  Determines if the hand contains a pair\n*/\nconst isPair = (handOf7) => {\n  let rankMap = new Map();\n  for (const card of handOf7) {\n    if (!rankMap.has(card.rank)) rankMap.set(card.rank, []);\n    rankMap.get(card.rank).push(card);\n    // found the first pair of the hand of 7, return it immediately\n    if (rankMap.get(card.rank).length === 2) {\n      let top5 = [...rankMap.get(card.rank)];\n      // add the three highest ranked cards not in the pair to top5\n      for (const card2 of handOf7) {\n        if (card2.rank !== card.rank) top5.push(card2);\n        if (top5.length === 5) return top5;\n      }\n    }\n  }\n  return [];\n};\n\nconst determineHandType = (handOf7) => {\n  // given 7 cards, determines the highest ranking hand type\n  // sort by ranking A K Q ... 3 2\n  handOf7.sort((a, b) => {\n    return rankings.indexOf(a.rank) - rankings.indexOf(b.rank);\n  });\n  let top5 = isRoyalFlush(handOf7);\n  if (top5.length) {\n    return { handRank: 1, handType: \"Royal Flush\", top5: top5 };\n  }\n  top5 = isStraightFlush(handOf7);\n  if (top5.length) {\n    const highRank = top5[0].rank;\n    const handType = `Straight Flush, ${highRank} High`;\n    return { handRank: 2, handType: handType, top5: top5 };\n  }\n  top5 = isFourOfAKind(handOf7);\n  if (top5.length) {\n    const highRank = top5[0].rank;\n    const handType = `Four Of A Kind, ${highRank}'s`;\n    return { handRank: 3, handType: handType, top5: top5 };\n  }\n  top5 = isFullHouse(handOf7);\n  if (top5.length) {\n    const threeRank = top5[0].rank;\n    const twoRank = top5[top5.length - 1].rank;\n    const handType = `Full House, ${threeRank}'s Full Of ${twoRank}'s `;\n    return { handRank: 4, handType: handType, top5: top5 };\n  }\n  top5 = isFlush(handOf7);\n  if (top5.length) {\n    const handRank = top5[0].rank;\n    const handType = `Flush, ${handRank} High`;\n    return { handRank: 5, handType: handType, top5: top5 };\n  }\n  top5 = isStraight(handOf7);\n  if (top5.length) {\n    const handRank = top5[0].rank;\n    const handType = `Straight, ${handRank} High`;\n    return { handRank: 6, handType: handType, top5: top5 };\n  }\n  top5 = isThreeOfAKind(handOf7);\n  if (top5.length) {\n    const handRank = top5[0].rank;\n    const handType = `Three Of A Kind, ${handRank}'s`;\n    return { handRank: 7, handType: handType, top5: top5 };\n  }\n  top5 = isTwoPair(handOf7);\n  if (top5.length) {\n    const firstPairRank = top5[0].rank;\n    const secondPairRank = top5[2].rank;\n    const handType = `Two Pair, ${firstPairRank}'s And ${secondPairRank}'s`;\n    return { handRank: 8, handType: handType, top5: top5 };\n  }\n  top5 = isPair(handOf7);\n  if (top5.length) {\n    const pairRank = top5[0].rank;\n    const handType = `Pair, ${pairRank}'s`;\n    return { handRank: 9, handType: handType, top5: top5 };\n  }\n  // high card\n  const handType = `High Card, ${handOf7[0].rank} High`;\n  return { handRank: 10, handType: handType, top5: handOf7.slice(0, 5) };\n};\n\nconst getPlayerHandType = (communityCards, playerHand) => {\n  // consider the 7 cards for a player and their hand type\n  const handOf7 = [playerHand.card1, playerHand.card2, ...communityCards];\n  return determineHandType(handOf7);\n};\n\nconst DetermineWinner = (communityCards, playerHands) => {\n  // transform player hands to player hand type\n  const playersHandTypeArr = playerHands.map((playerHand, idx) => {\n    return {\n      finalHand: getPlayerHandType(communityCards, playerHand),\n      playerIndex: idx,\n    };\n  });\n  // sort the array based on hand rank, break ties by comparing the\n  // top cards from each persons hand\n  // key = hand type, val = player index\n  let rankMap = new Map();\n  playersHandTypeArr.sort((a, b) => {\n    if (a.finalHand.handRank !== b.finalHand.handRank)\n      return a.finalHand.handRank - b.finalHand.handRank;\n    else {\n      for (\n        let i = 0;\n        i < a.finalHand.top5.length && i < b.finalHand.top5.length;\n        ++i\n      ) {\n        const aCardRank = a.finalHand.top5[i].rank;\n        const bCardRank = b.finalHand.top5[i].rank;\n        if (aCardRank !== bCardRank) {\n          return rankings.indexOf(aCardRank) - rankings.indexOf(bCardRank);\n        }\n      }\n      // if we reach here, the top card rankings are the same i.e. the two\n      // hands tied\n      if (!rankMap.has(a.finalHand.handRank)) {\n        rankMap.set(a.finalHand.handRank, new Set());\n      }\n      rankMap.get(a.finalHand.handRank).add(a.playerIndex);\n      rankMap.get(b.finalHand.handRank).add(b.playerIndex);\n\n      return 0;\n    }\n  });\n\n  const rankOfHand = playersHandTypeArr[0].finalHand.handRank;\n  const handType = playersHandTypeArr[0].finalHand.handType;\n  const indexOfHand = playersHandTypeArr[0].playerIndex;\n  const top5 = playersHandTypeArr[0].finalHand.top5;\n\n  // index 0 of the array (playersHandTypeArr) is either the complete winner\n  // or it is tied for first with other players\n  if (!rankMap.has(rankOfHand) || !rankMap.get(rankOfHand).has(indexOfHand)) {\n    // this player is the singular winner of the poker hand\n    return {\n      whoWon: `Player ${indexOfHand + 1} wins!`,\n      top5: top5,\n      handType: handType,\n      playerHandsResult: playersHandTypeArr,\n    };\n  } else {\n    let tiedPlayers = [...rankMap.get(rankOfHand)].sort().map((player) => {\n      return player + 1;\n    });\n    const whoWon = `Players ${tiedPlayers.slice(0, -1).join(\", \")} and ${\n      tiedPlayers[tiedPlayers.length - 1]\n    } have tied!`;\n    return {\n      whoWon: whoWon,\n      top5: top5,\n      handType: handType,\n      playerHandsResult: playersHandTypeArr,\n    };\n  }\n};\n\nexport { DetermineWinner, getPlayerHandType };\n","import { useState, useEffect, useRef } from \"react\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport Popper from \"@mui/material/Popper\";\nimport Fade from \"@mui/material/Fade\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport deckOfCards from \"./utils/CardDeck.js\";\nimport CommunityCards from \"./components/CommunityCards.js\";\nimport DeckOfCards from \"./components/DeckOfCards.js\";\nimport PlayerHands from \"./components/PlayerHands.js\";\nimport { DetermineWinner, getPlayerHandType } from \"./utils/DetermineWinner.js\";\n\nfunction TexasHoldem() {\n  const [communityCards, setCommunityCards] = useState(Array(5).fill(null));\n  const [usedCards, setUsedCards] = useState(new Set());\n  const [focusedCard, setFocusedCard] = useState({ idx: 0, card: null });\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [playerHands, setPlayerHands] = useState([\n    { card1: null, card2: null, info: null },\n    { card1: null, card2: null, info: null },\n  ]);\n  const [winnerInfo, setWinnerInfo] = useState(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [showCardErrorPopper, setShowCardErrorPopper] = useState(false);\n\n  const updateFocusedCard = () => {\n    for (\n      let i = focusedCard.idx > 5 + numPlayers ? 0 : focusedCard.idx;\n      i < focusedCard.idx + 5 + numPlayers;\n      ++i\n    ) {\n      const communityIdx = i % (5 + numPlayers);\n      if (communityIdx <= 4) {\n        // community card\n        if (communityCards[communityIdx] === null) {\n          setFocusedCard({ idx: communityIdx, card: null });\n          return;\n        }\n      } else {\n        const playerIdx = communityIdx - 5;\n        // player card\n        if (playerHands[playerIdx].card1 === null) {\n          setFocusedCard({ idx: playerIdx + 5, card: 0 });\n          return;\n        } else if (playerHands[playerIdx].card2 === null) {\n          setFocusedCard({ idx: playerIdx + 5, card: 1 });\n          return;\n        }\n      }\n    }\n    // all positions are filled\n    setFocusedCard({ idx: null, card: null });\n  };\n\n  const prevUsedCardsLen = useRef(usedCards.size);\n  const prevNumberOfPlayers = useRef(numPlayers);\n  useEffect(() => {\n    // only update the focused card if the usedCards len has become larger or numplayers has changed\n    if (\n      prevUsedCardsLen.current < usedCards.size ||\n      prevNumberOfPlayers.current !== numPlayers\n    ) {\n      updateFocusedCard();\n    }\n    prevUsedCardsLen.current = usedCards.size;\n    prevNumberOfPlayers.current = numPlayers;\n  });\n\n  const handleReset = () => {\n    setCommunityCards(Array(5).fill(null));\n    setUsedCards(new Set());\n    setFocusedCard({ idx: 0, card: null });\n    setWinnerInfo(null);\n    setShowCardErrorPopper(false);\n    let newPlayerHands = [];\n    for (let i = 0; i < numPlayers; ++i)\n      newPlayerHands.push({ card1: null, card2: null, info: null });\n    setPlayerHands(newPlayerHands);\n  };\n\n  const handleCalculateClick = (event) => {\n    // check if community cards is complete (has 5 cards)\n    const cc_count = communityCards.reduce((count, card) => {\n      return card !== null ? count + 1 : count;\n    }, 0);\n    // check that all player hands are complete (each hand has two cards)\n    const playerCount = playerHands.reduce((count, hand) => {\n      return hand !== null && hand.card1 !== null && hand.card2 !== null\n        ? count + 1\n        : count;\n    }, 0);\n\n    if (cc_count !== 5 || playerCount !== playerHands.length) {\n      // display popper letting user know to fill out all cards\n      setAnchorEl(event.currentTarget);\n      setShowCardErrorPopper(true);\n      return;\n    }\n\n    const winnerInfo = DetermineWinner(communityCards, playerHands);\n    const newPlayerHands = playerHands.map((playerHand) => {\n      const playerHandInfo = getPlayerHandType(communityCards, playerHand);\n      return { ...playerHand, info: playerHandInfo };\n    });\n    setPlayerHands(newPlayerHands);\n    setWinnerInfo(winnerInfo);\n  };\n\n  const updateNumberOfPlayers = (n) => {\n    const nInt = parseInt(n);\n    let newPlayerHands = [];\n    for (let i = 0; i < nInt; ++i) {\n      newPlayerHands.push({ card1: null, card2: null, info: null });\n    }\n    let newUsedCards = new Set(usedCards);\n    for (let i = 0; i < playerHands.length; ++i) {\n      // keep these hands\n      if (i < nInt) {\n        const playerHand = playerHands[i];\n        const hand = {\n          card1: playerHand.card1,\n          card2: playerHand.card2,\n          info: null,\n        };\n        newPlayerHands[i] = hand;\n      } else {\n        // add the cards back to the deck\n        if (playerHands[i].card1 !== null) {\n          const pos = playerHands[i].card1.position;\n          newUsedCards.delete(pos);\n        }\n        if (playerHands[i].card2 !== null) {\n          const pos = playerHands[i].card2.position;\n          newUsedCards.delete(pos);\n        }\n      }\n    }\n    setNumPlayers(nInt);\n    setUsedCards(newUsedCards);\n    setPlayerHands(newPlayerHands);\n    setWinnerInfo(null);\n  };\n\n  const handleDeckClick = (deckIndex) => {\n    if (!usedCards.has(deckIndex) && focusedCard.idx !== null) {\n      // update used cards set\n      let newUsedCards = new Set(usedCards);\n      newUsedCards.add(deckIndex);\n      setUsedCards(newUsedCards);\n\n      // update community card\n      if (focusedCard.idx <= 4) {\n        let newCC = [...communityCards];\n        newCC[focusedCard.idx] = deckOfCards[deckIndex];\n        setCommunityCards(newCC);\n      }\n      // update player card\n      else {\n        let newPlayerHands = playerHands.map((hand) => ({ ...hand }));\n        const playerIdx = focusedCard.idx - 5;\n        if (focusedCard.card === 0) {\n          newPlayerHands[playerIdx].card1 = deckOfCards[deckIndex];\n        } else if (focusedCard.card === 1) {\n          newPlayerHands[playerIdx].card2 = deckOfCards[deckIndex];\n        }\n        setPlayerHands(newPlayerHands);\n      }\n    }\n  };\n\n  const handleCommunityCardClick = (cardIndex) => {\n    // check if there is a card already present in position, remove if true\n    if (communityCards[cardIndex] !== null) {\n      // update community cards\n      let newCC = [...communityCards];\n      const cardPosition = newCC[cardIndex].position;\n      newCC[cardIndex] = null;\n      setCommunityCards(newCC);\n\n      // update players winning info\n      const newPlayerHands = playerHands.map((playerHand) => {\n        return { card1: playerHand.card1, card2: playerHand.card2, info: null };\n      });\n\n      // update used cards\n      let newUsedCards = new Set(usedCards);\n      newUsedCards.delete(cardPosition);\n      setUsedCards(newUsedCards);\n      setWinnerInfo(null);\n      setPlayerHands(newPlayerHands);\n    }\n    setFocusedCard({ idx: cardIndex, card: null });\n  };\n\n  const handlePlayerCardClick = (playerIdx, cardIdx) => {\n    // check if there is a card already present in position, remove if true\n    if (\n      (playerHands[playerIdx].card1 !== null && cardIdx === 0) ||\n      (playerHands[playerIdx].card2 !== null && cardIdx === 1)\n    ) {\n      let newPlayerHands = playerHands.map((playerHand) => ({\n        ...playerHand,\n        info: null,\n      }));\n      let cardToAddBack = null;\n      if (cardIdx === 0) {\n        cardToAddBack = newPlayerHands[playerIdx].card1.position;\n        newPlayerHands[playerIdx].card1 = null;\n      } else if (cardIdx === 1) {\n        cardToAddBack = newPlayerHands[playerIdx].card2.position;\n        newPlayerHands[playerIdx].card2 = null;\n      }\n      // remove the card deckIndex as being used\n      let newUsedCards = new Set(usedCards);\n      newUsedCards.delete(cardToAddBack);\n      setUsedCards(newUsedCards);\n      setPlayerHands(newPlayerHands);\n    }\n    setFocusedCard({ idx: playerIdx + 5, card: cardIdx });\n    setWinnerInfo(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1> TEXAS HOLD'EM HAND ANALYZER</h1>\n      <h3>Determines the winner based off of a complete poker hand</h3>\n      <div style={{ margin: 1 + \"rem\" }}>\n        <select\n          value={numPlayers}\n          onChange={(e) => updateNumberOfPlayers(e.target.value)}\n          style={{ marginRight: 1 + \"rem\" }}\n        >\n          {[2, 3, 4, 5, 6, 7, 8].map((n) => {\n            return (\n              <option key={\"Player \" + n} value={n}>\n                {n + \" players\"}\n              </option>\n            );\n          })}\n        </select>\n        <button onClick={() => handleReset()} style={{ marginLeft: 1 + \"rem\" }}>\n          Reset\n        </button>\n        {/* pop over shown if not all cards are filled */}\n        <ClickAwayListener onClickAway={() => setShowCardErrorPopper(false)}>\n          <span>\n            <button\n              onClick={(e) => handleCalculateClick(e)}\n              style={{ marginLeft: 1 + \"rem\" }}\n            >\n              Calculate\n            </button>\n            <Popper\n              open={showCardErrorPopper}\n              anchorEl={anchorEl}\n              placement={\"bottom\"}\n              transition\n            >\n              {({ TransitionProps }) => (\n                <Fade {...TransitionProps} timeout={200}>\n                  <Paper>\n                    <Typography sx={{ p: 2 }}>\n                      Make sure all card slots are filled.\n                    </Typography>\n                  </Paper>\n                </Fade>\n              )}\n            </Popper>\n          </span>\n        </ClickAwayListener>\n      </div>\n\n      <div className=\"allCardsContainer\">\n        <DeckOfCards\n          deckOfCards={deckOfCards}\n          usedCards={usedCards}\n          handleDeckClick={handleDeckClick}\n        />\n        <div className=\"ccAndPlayer\">\n          <CommunityCards\n            communityCards={communityCards}\n            focusedCard={focusedCard}\n            handleCommunityCardClick={handleCommunityCardClick}\n          />\n          <PlayerHands\n            playerHands={playerHands}\n            focusedCard={focusedCard}\n            handlePlayerCardClick={handlePlayerCardClick}\n          ></PlayerHands>\n\n          {/* winner information */}\n          {winnerInfo !== null ? (\n            <div>\n              <h1>{winnerInfo.whoWon}</h1>\n              <h2>{winnerInfo.handType}</h2>\n              <h3>Winning Hand:</h3>\n              <div className=\"winningHand\">\n                {winnerInfo.top5.map((card, i) => {\n                  const rank = card.rank;\n                  const suit = card.suit;\n                  const color = [\"♥︎\", \"♦︎\"].includes(suit) ? \"red\" : \"black\";\n                  return (\n                    <div className={\"miniCard\"} key={\"winningCard\" + i}>\n                      <div>{rank}</div>\n                      <div style={{ color: color }}>{suit}</div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TexasHoldem;\n","export default __webpack_public_path__ + \"static/media/Hand-Rankings-Upswing-Poker.2aa98204.jpg\";","import \"./App.css\";\nimport TexasHoldem from \"./TexasHoldem\";\n\nimport ModalImage from \"react-modal-image\";\nimport HandRankings from \"./assets/Hand-Rankings-Upswing-Poker.jpg\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"topNav\">\n        <ModalImage\n          className=\"navItem\"\n          alt=\"Poker Hand Rankings\"\n          medium={HandRankings}\n        />\n      </div>\n      <TexasHoldem />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}